/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class BluetoothDevice */

#ifndef _Included_BluetoothDevice
#define _Included_BluetoothDevice
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     BluetoothDevice
 * Method:    getBluetoothType
 * Signature: ()LBluetoothType;
 */
JNIEXPORT jobject JNICALL Java_BluetoothDevice_getBluetoothType
  (JNIEnv *, jobject);

/*
 * Class:     BluetoothDevice
 * Method:    clone
 * Signature: ()LBluetoothDevice;
 */
JNIEXPORT jobject JNICALL Java_BluetoothDevice_clone
  (JNIEnv *, jobject);

/*
 * Class:     BluetoothDevice
 * Method:    disconnect
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_BluetoothDevice_disconnect
  (JNIEnv *, jobject);

/*
 * Class:     BluetoothDevice
 * Method:    connect
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_BluetoothDevice_connect
  (JNIEnv *, jobject);

/*
 * Class:     BluetoothDevice
 * Method:    connectProfile
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_BluetoothDevice_connectProfile
  (JNIEnv *, jobject, jstring);

/*
 * Class:     BluetoothDevice
 * Method:    disconnectProfile
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_BluetoothDevice_disconnectProfile
  (JNIEnv *, jobject, jstring);

/*
 * Class:     BluetoothDevice
 * Method:    pair
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_BluetoothDevice_pair
  (JNIEnv *, jobject);

/*
 * Class:     BluetoothDevice
 * Method:    cancelPairing
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_BluetoothDevice_cancelPairing
  (JNIEnv *, jobject);

/*
 * Class:     BluetoothDevice
 * Method:    getServices
 * Signature: ()Ljava/util/List;
 */
JNIEXPORT jobject JNICALL Java_BluetoothDevice_getServices
  (JNIEnv *, jobject);

/*
 * Class:     BluetoothDevice
 * Method:    getAddress
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_BluetoothDevice_getAddress
  (JNIEnv *, jobject);

/*
 * Class:     BluetoothDevice
 * Method:    getName
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_BluetoothDevice_getName
  (JNIEnv *, jobject);

/*
 * Class:     BluetoothDevice
 * Method:    getAlias
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_BluetoothDevice_getAlias
  (JNIEnv *, jobject);

/*
 * Class:     BluetoothDevice
 * Method:    setAlias
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_BluetoothDevice_setAlias
  (JNIEnv *, jobject, jstring);

/*
 * Class:     BluetoothDevice
 * Method:    getBluetoothClass
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_BluetoothDevice_getBluetoothClass
  (JNIEnv *, jobject);

/*
 * Class:     BluetoothDevice
 * Method:    getAppearance
 * Signature: ()S
 */
JNIEXPORT jshort JNICALL Java_BluetoothDevice_getAppearance
  (JNIEnv *, jobject);

/*
 * Class:     BluetoothDevice
 * Method:    getIcon
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_BluetoothDevice_getIcon
  (JNIEnv *, jobject);

/*
 * Class:     BluetoothDevice
 * Method:    getPaired
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_BluetoothDevice_getPaired
  (JNIEnv *, jobject);

/*
 * Class:     BluetoothDevice
 * Method:    getTrusted
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_BluetoothDevice_getTrusted
  (JNIEnv *, jobject);

/*
 * Class:     BluetoothDevice
 * Method:    setTrusted
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_BluetoothDevice_setTrusted
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     BluetoothDevice
 * Method:    getBlocked
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_BluetoothDevice_getBlocked
  (JNIEnv *, jobject);

/*
 * Class:     BluetoothDevice
 * Method:    setBlocked
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_BluetoothDevice_setBlocked
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     BluetoothDevice
 * Method:    getLegacyPairing
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_BluetoothDevice_getLegacyPairing
  (JNIEnv *, jobject);

/*
 * Class:     BluetoothDevice
 * Method:    getRssi
 * Signature: ()S
 */
JNIEXPORT jshort JNICALL Java_BluetoothDevice_getRssi
  (JNIEnv *, jobject);

/*
 * Class:     BluetoothDevice
 * Method:    getConnected
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_BluetoothDevice_getConnected
  (JNIEnv *, jobject);

/*
 * Class:     BluetoothDevice
 * Method:    getUuids
 * Signature: ()[Ljava/lang/String;
 */
JNIEXPORT jobjectArray JNICALL Java_BluetoothDevice_getUuids
  (JNIEnv *, jobject);

/*
 * Class:     BluetoothDevice
 * Method:    getModalias
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_BluetoothDevice_getModalias
  (JNIEnv *, jobject);

/*
 * Class:     BluetoothDevice
 * Method:    getAdapter
 * Signature: ()LBluetoothAdapter;
 */
JNIEXPORT jobject JNICALL Java_BluetoothDevice_getAdapter
  (JNIEnv *, jobject);

/*
 * Class:     BluetoothDevice
 * Method:    delete
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_BluetoothDevice_delete
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
